{"version":3,"sources":["../node_modules/google-spreadsheet sync","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","EVENT_TYPES","POOP","ASLEEP","AWAKE","EAT","MISC","ActivityEvent","row","Object","classCallCheck","this","createClass","key","value","activity","match","PoopActivityEvent","AsleepActivityEvent","AwakeActivityEvent","EatActivityEvent","event","start","title","color","get","timestamp","time","_","parse","parseTime","_ActivityEvent","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","concat","esm_get","prototype","_ActivityEvent2","mins","h","Math","floor","m","differenceInHours","end","objectSpread","call","minutesAsleep","differenceInMinutes","convertMinsToHrsMins","_ActivityEvent3","_ActivityEvent4","_this","rows","push","amount","set","parseInt","emojis","length","join","processEvents","recent","acc","create","lastAsleepEvent","canCoalesce","add","lastEatEvent","type","map","toJson","App","_useState","useState","_useState2","slicedToArray","data","setData","useEffect","_fetchData","asyncToGenerator","regenerator_default","a","mark","_callee","events","wrap","_context","prev","next","gsjson","spreadsheetId","process","sent","stop","fetchData","react_default","createElement","className","main_esm","defaultView","height","navLinks","timeGridEventMinHeight","header","left","center","right","plugins","listPlugin","timeGridPlugin","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6fe480d1.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 568;","import React, { useEffect, useState } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport listPlugin from '@fullcalendar/list';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport gsjson from 'google-spreadsheet-to-json';\nimport * as _ from 'lodash-es';\nimport { differenceInHours, differenceInMinutes, parse } from 'date-fns';\n\nimport './App.css';\n\nexport const EVENT_TYPES = {\n  POOP: 'POOP',\n  ASLEEP: 'ASLEEP',\n  AWAKE: 'AWAKE',\n  EAT: 'EAT',\n  MISC: 'MISC',\n};\n\nexport function parseTime(timestamp) {\n  let time = timestamp;\n\n  time = _.replace(time, ' at ', ' ');\n  time = _.replace(time, 'AM', ' AM');\n  time = _.replace(time, 'PM', ' PM');\n\n  return parse(time);\n}\n\nexport class ActivityEvent {\n  static create(row) {\n    if (row.activity.match(/poop/)) {\n      return new PoopActivityEvent(row);\n    } else if (row.activity.match(/asleep|down/)) {\n      return new AsleepActivityEvent(row);\n    } else if (row.activity.match(/awake|up/)) {\n      return new AwakeActivityEvent(row);\n    } else if (row.activity.match(/\\d+/)) {\n      return new EatActivityEvent(row);\n    } else {\n      return new ActivityEvent(row);\n    }\n  }\n\n  constructor(row) {\n    this.row = row;\n  }\n\n  get start() {\n    return parseTime(this.row.timestamp);\n  }\n\n  get title() {\n    return this.row.activity;\n  }\n\n  get type() {\n    return EVENT_TYPES.MISC;\n  }\n\n  canCoalesce(event) {\n    return false;\n  }\n\n  toJson() {\n    return {\n      start: this.start,\n      title: this.title,\n      color: this.color,\n    };\n  }\n}\n\nexport class PoopActivityEvent extends ActivityEvent {\n  get color() {\n    return 'brown';\n  }\n\n  get title() {\n    return `💩${super.title}`;\n  }\n\n  get type() {\n    return EVENT_TYPES.POOP;\n  }\n}\n\nexport class AsleepActivityEvent extends ActivityEvent {\n  get color() {\n    return 'green';\n  }\n\n  get title() {\n    if (this.end) {\n      const minutesAsleep = differenceInMinutes(this.end, this.start);\n      return `😴 asleep for ${this.convertMinsToHrsMins(minutesAsleep)}`;\n    } else {\n      return `😴${super.title}`;\n    }\n  }\n\n  get type() {\n    return EVENT_TYPES.ASLEEP;\n  }\n\n  convertMinsToHrsMins(mins) {\n    let h = Math.floor(mins / 60);\n    let m = mins % 60;\n    m = m < 10 ? '0' + m : m;\n    return `${h}:${m}`;\n  }\n\n  canCoalesce(event) {\n    return differenceInHours(event.start, this.start) < 24;\n  }\n\n  add(event) {\n    this.end = event.start;\n  }\n\n  toJson() {\n    return {\n      ...super.toJson(),\n      end: this.end,\n    };\n  }\n}\n\nexport class AwakeActivityEvent extends ActivityEvent {\n  get color() {\n    return 'green';\n  }\n\n  get title() {\n    return `😊${super.title}`;\n  }\n\n  get type() {\n    return EVENT_TYPES.AWAKE;\n  }\n}\n\nexport class EatActivityEvent extends ActivityEvent {\n  constructor(row) {\n    super();\n    this.rows = [row];\n  }\n\n  get row() {\n    return this.rows[0];\n  }\n\n  set row(row) {}\n\n  get amount() {\n    return _.sumBy(this.rows, row => parseInt(row.activity.match(/\\d+/)[0]));\n  }\n\n  get color() {\n    return 'purple';\n  }\n\n  get title() {\n    const emojis = _.times(this.rows.length, () => '🍼').join('');\n    return `${emojis}took ${this.amount}`;\n  }\n\n  get type() {\n    return EVENT_TYPES.EAT;\n  }\n\n  canCoalesce(event) {\n    return differenceInMinutes(event.start, this.start) < 60;\n  }\n\n  add(event) {\n    this.rows.push(event.row);\n    this.end = event.start;\n  }\n\n  toJson() {\n    return {\n      ...super.toJson(),\n      amount: this.amount,\n      end: this.end,\n    };\n  }\n}\n\nexport function processEvents(rows) {\n  const recent = {};\n\n  // assume list is sorted\n  const events = _.reduce(\n    rows,\n    (acc, row) => {\n      const event = ActivityEvent.create(row);\n\n      if (event instanceof AwakeActivityEvent) {\n        const lastAsleepEvent = recent[EVENT_TYPES.ASLEEP];\n        if (lastAsleepEvent && lastAsleepEvent.canCoalesce(event)) {\n          lastAsleepEvent.add(event);\n        } else {\n          acc.push(event);\n        }\n      } else if (event instanceof EatActivityEvent) {\n        const lastEatEvent = recent[EVENT_TYPES.EAT];\n        if (lastEatEvent && lastEatEvent.canCoalesce(event)) {\n          lastEatEvent.add(event);\n        } else {\n          acc.push(event);\n        }\n      } else {\n        acc.push(event);\n      }\n      recent[event.type] = event;\n\n      return acc;\n    },\n    []\n  );\n\n  return events.map(event => event.toJson());\n}\n\nfunction App() {\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    async function fetchData() {\n      const rows = await gsjson({\n        spreadsheetId: process.env.REACT_APP_SPREADSHEET_ID,\n      });\n\n      const events = processEvents(rows);\n\n      setData(events);\n    }\n\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"root\">\n      <FullCalendar\n        defaultView=\"listDay\"\n        height=\"parent\"\n        navLinks\n        timeGridEventMinHeight={40}\n        header={{\n          left: 'prev,next today',\n          center: 'title',\n          right: 'timeGridWeek,timeGridDay,listDay',\n        }}\n        plugins={[listPlugin, timeGridPlugin]}\n        events={data}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}