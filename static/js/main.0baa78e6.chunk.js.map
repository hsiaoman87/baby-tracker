{"version":3,"sources":["../node_modules/google-spreadsheet sync","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","EVENT_TYPES","POOP","ASLEEP","AWAKE","EAT","MISC","ActivityEvent","row","Object","classCallCheck","this","createClass","key","value","activity","match","PoopActivityEvent","AsleepActivityEvent","AwakeActivityEvent","EatActivityEvent","event","start","title","color","get","timestamp","time","_","parse","parseTime","_ActivityEvent","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","concat","esm_get","prototype","getAsleepTimeTitle","minutesAsleep","mins","h","Math","floor","m","convertMinsToHrsMins","_ActivityEvent2","differenceInHours","end","objectSpread","call","differenceInMinutes","_ActivityEvent3","_ActivityEvent4","_this","rows","push","amount","set","parseInt","emojis","length","join","NextSleepActivityEvent","lastAwakeTime","now","undefined","Date","AWAKE_DURATION","BEDTIME","WAKETIME","addHours","max","hours","getHours","AllDayEvent","obj","processEvents","recent","events","acc","create","lastAsleepEvent","canCoalesce","add","lastEatEvent","type","getAllDayEvents","eventsGroupedByDate","startDate","format","endDate","getEventsGroupedByDate","date","groupedEvents","allDayEvents","numPoops","totalTimeAsleep","asleepEvents","timeAsleep","startTime","endTime","startOfDay","endOfDay","getTotalTimeAsleep","totalAmount","getNextSleepEvent","App","_useState","useState","_useState2","slicedToArray","data","setData","useEffect","fetchData","_fetchData","asyncToGenerator","regenerator_default","a","mark","_callee","_processEvents","nextSleepEvent","allEvents","wrap","_context","prev","next","gsjson","spreadsheetId","process","sent","toJson","stop","window","addEventListener","removeEventListener","react_default","createElement","className","main_esm","defaultView","height","navLinks","timeGridEventMinHeight","nowIndicator","header","left","center","right","plugins","listPlugin","timeGridPlugin","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0baa78e6.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 583;","import React, { useEffect, useState } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport listPlugin from '@fullcalendar/list';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport gsjson from 'google-spreadsheet-to-json';\nimport * as _ from 'lodash-es';\nimport {\n  addHours,\n  differenceInHours,\n  differenceInMinutes,\n  endOfDay,\n  format,\n  getHours,\n  max,\n  min,\n  parse,\n  startOfDay,\n} from 'date-fns';\n\nimport './App.css';\n\nexport const EVENT_TYPES = {\n  POOP: 'POOP',\n  ASLEEP: 'ASLEEP',\n  AWAKE: 'AWAKE',\n  EAT: 'EAT',\n  MISC: 'MISC',\n};\n\nexport function parseTime(timestamp) {\n  let time = timestamp;\n\n  time = _.replace(time, ' at ', ' ');\n  time = _.replace(time, 'AM', ' AM');\n  time = _.replace(time, 'PM', ' PM');\n\n  return parse(time);\n}\n\nexport class ActivityEvent {\n  static create(row) {\n    if (row.activity.match(/poop/)) {\n      return new PoopActivityEvent(row);\n    } else if (row.activity.match(/asleep|down/)) {\n      return new AsleepActivityEvent(row);\n    } else if (row.activity.match(/awake|up/)) {\n      return new AwakeActivityEvent(row);\n    } else if (row.activity.match(/\\d+/)) {\n      return new EatActivityEvent(row);\n    } else {\n      return new ActivityEvent(row);\n    }\n  }\n\n  constructor(row) {\n    this.row = row;\n  }\n\n  get start() {\n    return parseTime(this.row.timestamp);\n  }\n\n  get title() {\n    return this.row.activity;\n  }\n\n  get type() {\n    return EVENT_TYPES.MISC;\n  }\n\n  canCoalesce(event) {\n    return false;\n  }\n\n  toJson() {\n    return {\n      start: this.start,\n      title: this.title,\n      color: this.color,\n    };\n  }\n}\n\nexport class PoopActivityEvent extends ActivityEvent {\n  get color() {\n    return 'brown';\n  }\n\n  get title() {\n    return `💩${super.title}`;\n  }\n\n  get type() {\n    return EVENT_TYPES.POOP;\n  }\n}\n\nfunction convertMinsToHrsMins(mins) {\n  let h = Math.floor(mins / 60);\n  let m = mins % 60;\n  m = m < 10 ? '0' + m : m;\n  return `${h}:${m}`;\n}\n\nfunction getAsleepTimeTitle(minutesAsleep) {\n  return `😴 asleep for ${convertMinsToHrsMins(minutesAsleep)}`;\n}\nexport class AsleepActivityEvent extends ActivityEvent {\n  get color() {\n    return 'green';\n  }\n\n  get title() {\n    if (this.end) {\n      const minutesAsleep = differenceInMinutes(this.end, this.start);\n      return getAsleepTimeTitle(minutesAsleep);\n    } else {\n      return `😴${super.title}`;\n    }\n  }\n\n  get type() {\n    return EVENT_TYPES.ASLEEP;\n  }\n\n  canCoalesce(event) {\n    return differenceInHours(event.start, this.start) < 24;\n  }\n\n  add(event) {\n    this.end = event.start;\n  }\n\n  toJson() {\n    return {\n      ...super.toJson(),\n      end: this.end,\n    };\n  }\n}\n\nexport class AwakeActivityEvent extends ActivityEvent {\n  get color() {\n    return 'green';\n  }\n\n  get title() {\n    return `😊${super.title}`;\n  }\n\n  get type() {\n    return EVENT_TYPES.AWAKE;\n  }\n}\n\nexport class EatActivityEvent extends ActivityEvent {\n  constructor(row) {\n    super();\n    this.rows = [row];\n  }\n\n  get row() {\n    return this.rows[0];\n  }\n\n  set row(row) {}\n\n  get amount() {\n    return _.sumBy(this.rows, row =>\n      parseInt(row.activity.match(/\\d+/)[0], 10)\n    );\n  }\n\n  get color() {\n    return 'purple';\n  }\n\n  get title() {\n    const emojis = _.times(this.rows.length, () => '🍼').join('');\n    return `${emojis}took ${this.amount}`;\n  }\n\n  get type() {\n    return EVENT_TYPES.EAT;\n  }\n\n  canCoalesce(event) {\n    return differenceInMinutes(event.start, this.start) < 60;\n  }\n\n  add(event) {\n    this.rows.push(event.row);\n    this.end = event.start;\n  }\n\n  toJson() {\n    return {\n      ...super.toJson(),\n      amount: this.amount,\n      end: this.end,\n    };\n  }\n}\n\nexport class NextSleepActivityEvent {\n  AWAKE_DURATION = 2; // in hours\n  BEDTIME = 22; // 10pm\n  WAKETIME = 10; // 10am\n\n  constructor(lastAwakeTime, now = new Date()) {\n    const time = addHours(lastAwakeTime, this.AWAKE_DURATION);\n    this.start = max(time, now);\n  }\n\n  get title() {\n    const hours = getHours(this.start);\n    if (hours >= this.BEDTIME || hours < this.WAKETIME) {\n      return 'Time to sleep!';\n    } else {\n      return 'Time for a nap!';\n    }\n  }\n\n  toJson() {\n    return {\n      start: this.start,\n      title: this.title,\n      color: 'green',\n    };\n  }\n}\n\nexport class AllDayEvent {\n  constructor(obj) {\n    this.obj = obj;\n  }\n\n  toJson() {\n    return this.obj;\n  }\n}\n\nexport function processEvents(rows) {\n  const recent = {};\n\n  // assume list is sorted\n  const events = _.reduce(\n    rows,\n    (acc, row) => {\n      const event = ActivityEvent.create(row);\n\n      if (event instanceof AwakeActivityEvent) {\n        const lastAsleepEvent = recent[EVENT_TYPES.ASLEEP];\n        if (lastAsleepEvent && lastAsleepEvent.canCoalesce(event)) {\n          lastAsleepEvent.add(event);\n        } else {\n          acc.push(event);\n        }\n      } else if (event instanceof EatActivityEvent) {\n        const lastEatEvent = recent[EVENT_TYPES.EAT];\n        if (lastEatEvent && lastEatEvent.canCoalesce(event)) {\n          lastEatEvent.add(event);\n        } else {\n          acc.push(event);\n        }\n      } else {\n        acc.push(event);\n      }\n      recent[event.type] = event;\n\n      return acc;\n    },\n    []\n  );\n\n  return { events, recent };\n}\n\nexport function getEventsGroupedByDate(events) {\n  return _.reduce(\n    events,\n    (acc, event) => {\n      const startDate = format(event.start, 'YYYY-MM-DD');\n      if (!acc[startDate]) {\n        acc[startDate] = [];\n      }\n      acc[startDate].push(event);\n\n      if (event.end) {\n        const endDate = format(event.end, 'YYYY-MM-DD');\n        if (startDate !== endDate) {\n          if (!acc[endDate]) {\n            acc[endDate] = [];\n          }\n          acc[endDate].push(event);\n        }\n      }\n\n      return acc;\n    },\n    {}\n  );\n}\n\nexport function getTotalTimeAsleep(asleepEvents, date) {\n  return _.reduce(\n    asleepEvents,\n    (acc, event) => {\n      let timeAsleep;\n      if (event.end) {\n        let startTime;\n        let endTime;\n        if (format(event.start, 'YYYY-MM-DD') !== date) {\n          // sleep from night before\n          startTime = startOfDay(event.end);\n          endTime = event.end;\n        } else if (format(event.end, 'YYYY-MM-DD') !== date) {\n          // tonight's sleep\n          startTime = event.start;\n          endTime = endOfDay(event.start);\n        } else {\n          // nap\n          startTime = event.start;\n          endTime = event.end;\n        }\n        timeAsleep = differenceInMinutes(endTime, startTime);\n      } else {\n        timeAsleep = 0;\n      }\n      return acc + timeAsleep;\n    },\n    0\n  );\n}\n\nfunction getAllDayEvents(events) {\n  // Use formatted dates here to represent all-day\n  const eventsGroupedByDate = getEventsGroupedByDate(events);\n\n  return _.flatMap(eventsGroupedByDate, (events, date) => {\n    const groupedEvents = _.groupBy(events, _.property('type'));\n    const allDayEvents = [];\n    if (groupedEvents[EVENT_TYPES.POOP]) {\n      const numPoops = groupedEvents[EVENT_TYPES.POOP].length;\n      allDayEvents.push(\n        new AllDayEvent({\n          start: date,\n          title: _.times(numPoops, () => '💩').join(''),\n          color: 'brown',\n        })\n      );\n    }\n    if (groupedEvents[EVENT_TYPES.ASLEEP]) {\n      const totalTimeAsleep = getTotalTimeAsleep(\n        groupedEvents[EVENT_TYPES.ASLEEP],\n        date\n      );\n      if (totalTimeAsleep) {\n        allDayEvents.push(\n          new AllDayEvent({\n            start: date,\n            title: getAsleepTimeTitle(totalTimeAsleep),\n            color: 'green',\n          })\n        );\n      }\n    }\n    if (groupedEvents[EVENT_TYPES.EAT]) {\n      const totalAmount = _.reduce(\n        groupedEvents[EVENT_TYPES.EAT],\n        (acc, event) => {\n          let amount;\n          if (event.amount) {\n            amount = event.amount;\n          } else {\n            amount = 0;\n          }\n          return acc + amount;\n        },\n        0\n      );\n      if (totalAmount) {\n        allDayEvents.push(\n          new AllDayEvent({\n            start: date,\n            title: `🍼took ${totalAmount}`,\n            color: 'purple',\n          })\n        );\n      }\n    }\n\n    return allDayEvents;\n  });\n}\n\nfunction getNextSleepEvent(recent) {\n  if (\n    recent[EVENT_TYPES.AWAKE] &&\n    recent[EVENT_TYPES.ASLEEP] &&\n    recent[EVENT_TYPES.AWAKE].start > recent[EVENT_TYPES.ASLEEP].start\n  ) {\n    return new NextSleepActivityEvent(recent[EVENT_TYPES.AWAKE].start);\n  }\n}\n\nfunction App() {\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    async function fetchData() {\n      const rows = await gsjson({\n        spreadsheetId: process.env.REACT_APP_SPREADSHEET_ID,\n      });\n\n      const { events, recent } = processEvents(rows);\n\n      const nextSleepEvent = getNextSleepEvent(recent);\n      if (nextSleepEvent) {\n        events.push(nextSleepEvent);\n      }\n\n      const allDayEvents = getAllDayEvents(events);\n\n      const allEvents = events.concat(allDayEvents);\n\n      setData(_.map(allEvents, event => event.toJson()));\n    }\n\n    fetchData();\n\n    window.addEventListener('focus', fetchData);\n\n    return () => {\n      window.removeEventListener('focus', fetchData);\n    };\n  }, []);\n\n  return (\n    <div className=\"root\">\n      <FullCalendar\n        defaultView=\"listDay\"\n        height=\"parent\"\n        navLinks\n        timeGridEventMinHeight={40}\n        nowIndicator\n        header={{\n          left: 'prev,next today',\n          center: 'title',\n          right: 'timeGridWeek,timeGridDay,listDay',\n        }}\n        plugins={[listPlugin, timeGridPlugin]}\n        events={data}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}